//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NepoGUI.MediatorServiceRef {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CanIHasPope", Namespace="http://schemas.datacontract.org/2004/07/Mediator")]
    public enum CanIHasPope : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WhiteSmoke = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BlackSmoke = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MediatorServiceRef.IMediator", CallbackContract=typeof(NepoGUI.MediatorServiceRef.IMediatorCallback))]
    public interface IMediator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/Register", ReplyAction="http://tempuri.org/IMediator/RegisterResponse")]
        Nepo.Common.Instance Register(System.Guid agentGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/Register", ReplyAction="http://tempuri.org/IMediator/RegisterResponse")]
        System.Threading.Tasks.Task<Nepo.Common.Instance> RegisterAsync(System.Guid agentGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/GetProposedSolutions", ReplyAction="http://tempuri.org/IMediator/GetProposedSolutionsResponse")]
        System.Collections.Generic.List<Nepo.Common.Solution> GetProposedSolutions(System.Guid agentGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/GetProposedSolutions", ReplyAction="http://tempuri.org/IMediator/GetProposedSolutionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Nepo.Common.Solution>> GetProposedSolutionsAsync(System.Guid agentGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/Vote", ReplyAction="http://tempuri.org/IMediator/VoteResponse")]
        void Vote(System.Collections.Generic.List<System.Tuple<int, bool>> votes, System.Guid agentGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/Vote", ReplyAction="http://tempuri.org/IMediator/VoteResponse")]
        System.Threading.Tasks.Task VoteAsync(System.Collections.Generic.List<System.Tuple<int, bool>> votes, System.Guid agentGuid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediatorCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMediator/DataReady", ReplyAction="http://tempuri.org/IMediator/DataReadyResponse")]
        void DataReady(NepoGUI.MediatorServiceRef.CanIHasPope popeState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediatorChannel : NepoGUI.MediatorServiceRef.IMediator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediatorClient : System.ServiceModel.DuplexClientBase<NepoGUI.MediatorServiceRef.IMediator>, NepoGUI.MediatorServiceRef.IMediator {
        
        public MediatorClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MediatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MediatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MediatorClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MediatorClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Nepo.Common.Instance Register(System.Guid agentGuid) {
            return base.Channel.Register(agentGuid);
        }
        
        public System.Threading.Tasks.Task<Nepo.Common.Instance> RegisterAsync(System.Guid agentGuid) {
            return base.Channel.RegisterAsync(agentGuid);
        }
        
        public System.Collections.Generic.List<Nepo.Common.Solution> GetProposedSolutions(System.Guid agentGuid) {
            return base.Channel.GetProposedSolutions(agentGuid);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Nepo.Common.Solution>> GetProposedSolutionsAsync(System.Guid agentGuid) {
            return base.Channel.GetProposedSolutionsAsync(agentGuid);
        }
        
        public void Vote(System.Collections.Generic.List<System.Tuple<int, bool>> votes, System.Guid agentGuid) {
            base.Channel.Vote(votes, agentGuid);
        }
        
        public System.Threading.Tasks.Task VoteAsync(System.Collections.Generic.List<System.Tuple<int, bool>> votes, System.Guid agentGuid) {
            return base.Channel.VoteAsync(votes, agentGuid);
        }
    }
}
